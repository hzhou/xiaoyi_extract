subcode: _autoload
    $import * from trxas_extract 
    $list check_file, extract_all, plot_avg_file

    class G:
        opts = {}

    G.file_type = ""

fncode: check_file(file)
    $import os.path
    $if not file or not os.path.exists(file)
        print("File not found? [%s]" % file)
        return
    trxas = Extract()
    trxas.read(file)
    $(for:a in c,o,b)
        assert trxas.$(a)_min == 0
    $(for:type,num_channel,num_bunches,num_orbital,num_rows)
        G.$1 = trxas.$1

    $if RE.match(r'(.*)-\d+$', os.path.basename(file))
        G.folder = os.path.dirname(file)
        G.name = RE.m.group(1)

        load_files(G.folder)
        # print("[folder:%s] %d data files, name: %s, index range: %s - %s" % (G.folder, len(G.files), G.name, G.idx_min, G.idx_max))

fncode: load_files(folder_in)
    G.idx_min = 99999
    G.idx_max = 0
    # G.name = None
    G.files = []
    for root, dirs, files in os.walk(folder_in):
        for name in files:
            $if RE.match(r'(.*)-(\d+)$', name)
                filepath = os.path.join(root, name)
                idx = int(RE.m.group(2))

                G.files.append(filepath)
                $if G.idx_min > idx
                    G.idx_min = idx
                $if G.idx_max < idx
                    G.idx_max = idx

fncode: extract_all()
    $if not G.folder or not os.path.exists(G.folder)
        print("Run check_file() first.")
        return

    folder_out = G.output_folder
    $if not os.path.exists(folder_out)
        os.makedirs(folder_out)

    count = 0
    $for file_in in G.files
        $if RE.match(r'(.*)-(\d+)$', file_in)
            idx = int(RE.m.group(2))
            $if idx < G.idx_min or idx > G.idx_max
                continue
        file_out = os.path.join(folder_out, os.path.basename(file_in) + '.txt')

        trxas = Extract()
        $if trxas.read(file_in)
            $if G.opts['do_poission']
                trxas.normalize(float(G.opts['rep_rate']))
            $else
                trxas.normalize()
            $if G.type == "Energy" and trxas.type == "Energy"
                $call run_Energy
            $elif G.type == "laserd" and trxas.type == "laserd"
                $call run_laserd
            $else
                print("ignoring %s, type mismatch: %s != %s" % (G.type, trxas.type))
        count++
    print("Processed %d data files in %s\n" % (count, folder_out))
    
    subcode: run_Energy
        do_perbunch = not (G.opts['gs_method'] == 'avg bunch GS')
        trxas.process_energy(file_out, int(G.opts['trigger']), int(G.opts['pre_n_avg']), int(G.opts['aft_n_avg']), int(G.opts['aft_npnt']), do_perbunch)

    subcode: run_laserd
        do_perbunch = not (G.opts['gs_method'] == 'avg bunch GS')
        trxas.process_laserd(file_out, int(G.opts['trigger']), int(G.opts['pre_n_avg']), int(G.opts['num_bunch']), int(G.opts['n_pre_bunch']), do_perbunch)

fncode: plot_avg_file(col)
    $import matplotlib.pyplot as plt
    t = np.loadtxt(G.avg_file, skiprows = 1)
    $if t.shape[1] == 2
        plt.xlabel('Laser Delay')
        plt.plot(t[:,0], t[:,1], label='diff', color='tab:blue') 
    $else
        plt.xlabel('Energy')
        plt.plot(t[:,0], t[:,col*2+1], label='raw', color='tab:blue') 
        plt.plot(t[:,0], t[:,col*2+2], label='diff', color='tab:red') 

